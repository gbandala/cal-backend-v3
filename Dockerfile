# FROM node:18-alpine AS builder

# # Crear directorio de la aplicaci√≥n
# WORKDIR /app

# # Copiar archivos de configuraci√≥n
# COPY package*.json tsconfig.json ./

# # Instalar dependencias - CAMBIADO: npm install en lugar de npm ci
# RUN npm install

# # Copiar c√≥digo fuente
# COPY src/ ./src/

# # Construir aplicaci√≥n
# RUN npm run build

# # Etapa de producci√≥n
# FROM node:18-alpine AS production

# # Crear directorio de la aplicaci√≥n
# WORKDIR /app

# # Copiar archivos de configuraci√≥n
# COPY package*.json ./

# # Instalar solo dependencias de producci√≥n - CAMBIADO: npm install en lugar de npm ci
# RUN npm install --only=production

# # Crear directorios para logs y archivos temporales
# RUN mkdir -p logs tmp
# RUN chmod 777 logs tmp

# # Copiar c√≥digo compilado
# COPY --from=builder /app/dist ./dist

# # Exponer puerto
# EXPOSE 8000

# # Comando para iniciar la aplicaci√≥n
# CMD ["node", "dist/index.js"]
# üèóÔ∏è ETAPA DE CONSTRUCCI√ìN
FROM node:18-alpine AS builder

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache python3 make g++

# Crear directorio de la aplicaci√≥n
WORKDIR /app

# Copiar archivos de configuraci√≥n
COPY package*.json tsconfig.json ./

# üîß Instalar TODAS las dependencias (incluyendo devDependencies para build)
RUN npm ci --include=dev

# Copiar c√≥digo fuente
COPY src/ ./src/

# üöÄ Construir aplicaci√≥n
RUN npm run build

# Verificar que la construcci√≥n fue exitosa
RUN ls -la dist/

# ‚ö° ETAPA DE PRODUCCI√ìN
FROM node:18-alpine AS production

# Instalar dumb-init para manejo correcto de se√±ales
RUN apk add --no-cache dumb-init

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs
RUN adduser -S backend -u 1001

# Crear directorio de la aplicaci√≥n
WORKDIR /app

# Cambiar propiedad del directorio
RUN chown -R backend:nodejs /app
USER backend

# Copiar archivos de configuraci√≥n
COPY --chown=backend:nodejs package*.json ./

# üì¶ Instalar SOLO dependencias de producci√≥n
RUN npm ci --only=production && npm cache clean --force

# Crear directorios para logs y archivos temporales
RUN mkdir -p logs tmp

# üìÅ Copiar c√≥digo compilado
COPY --from=builder --chown=backend:nodejs /app/dist ./dist

# üîç Verificar estructura de archivos
RUN ls -la dist/
RUN ls -la dist/database/entities/ || echo "‚ö†Ô∏è No se encontraron entidades"

# Variables de entorno por defecto
ENV NODE_ENV=production
ENV PORT=8000

# üîì Exponer puerto
EXPOSE 8000

# üéØ Comando para iniciar la aplicaci√≥n con dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]

# üè∑Ô∏è Etiquetas de metadata
LABEL maintainer="bandala@outlook.com"
LABEL version="1.0.0"
LABEL description="Backend API con TypeORM y PostgreSQL"