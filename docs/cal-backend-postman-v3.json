{
  "info": {
    "name": "Cal Backend API v3 - Complete Calendar Management",
    "description": "Colección completa de endpoints para Cal Backend v3 - Sistema avanzado de gestión de calendarios y reuniones con soporte completo para calendarios específicos, OAuth2 y manejo inteligente de zonas horarias",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "cal-backend-api-v3",
    "version": "3.0.0"
  },
  "variable": [
    {
      "key": "BASE_URL",
      "value": "http://localhost:8000/api/v1",
      "type": "string",
      "description": "Base URL para todos los endpoints de la API v3"
    },
    {
      "key": "JWT_TOKEN",
      "value": "",
      "type": "string",
      "description": "Token JWT para autenticación"
    },
    {
      "key": "USER_ID",
      "value": "",
      "type": "string",
      "description": "ID del usuario autenticado"
    },
    {
      "key": "USERNAME",
      "value": "",
      "type": "string",
      "description": "Username único del usuario"
    },
    {
      "key": "EVENT_ID",
      "value": "",
      "type": "string",
      "description": "ID del evento creado"
    },
    {
      "key": "EVENT_SLUG",
      "value": "",
      "type": "string",
      "description": "Slug único del evento"
    },
    {
      "key": "MEETING_ID",
      "value": "",
      "type": "string",
      "description": "ID de la reunión programada"
    },
    {
      "key": "CALENDAR_ID",
      "value": "primary",
      "type": "string",
      "description": "ID del calendario de Google"
    },
    {
      "key": "TIMEZONE",
      "value": "America/Mexico_City",
      "type": "string",
      "description": "Zona horaria IANA por defecto"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication & Users",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('username');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('USER_ID', response.data.id);",
                  "    pm.collectionVariables.set('USERNAME', response.data.username);",
                  "    console.log('✅ User registered:', response.data.email);",
                  "    console.log('📝 Username:', response.data.username);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"juan.perez@ejemplo.com\",\n  \"password\": \"SecurePassword123!\",\n  \"firstName\": \"Juan\",\n  \"lastName\": \"Pérez\",\n  \"timezone\": \"{{TIMEZONE}}\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/auth/register",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "register"]
            },
            "description": "Registra un nuevo usuario en el sistema con validación completa"
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('JWT_TOKEN', response.data.token);",
                  "    pm.collectionVariables.set('USER_ID', response.data.user.id);",
                  "    pm.collectionVariables.set('USERNAME', response.data.user.username);",
                  "    console.log('✅ Login successful');",
                  "    console.log('👤 User:', response.data.user.firstName, response.data.user.lastName);",
                  "    console.log('⏰ Token expires in:', response.data.expiresIn);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"juan.perez@ejemplo.com\",\n  \"password\": \"SecurePassword123!\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/auth/login",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "login"]
            },
            "description": "Autentica usuario y obtiene JWT token"
          }
        },
        {
          "name": "Get User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('email');",
                  "    pm.expect(jsonData.data).to.have.property('timezone');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/auth/profile",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "profile"]
            },
            "description": "Obtiene perfil del usuario autenticado"
          }
        },
        {
          "name": "Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Juan Carlos\",\n  \"lastName\": \"Pérez García\",\n  \"timezone\": \"America/New_York\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/auth/profile",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "profile"]
            },
            "description": "Actualiza información del perfil de usuario"
          }
        }
      ],
      "description": "👤 Endpoints para gestión de usuarios y autenticación"
    },
    {
      "name": "📅 Calendars Management",
      "item": [
        {
          "name": "List User Calendars",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.calendars && response.data.calendars.length > 0) {",
                  "        const primaryCalendar = response.data.calendars.find(cal => cal.isPrimary);",
                  "        const firstCalendar = response.data.calendars[0];",
                  "        ",
                  "        pm.collectionVariables.set('CALENDAR_ID', primaryCalendar ? primaryCalendar.id : firstCalendar.id);",
                  "        console.log('📅 Found', response.data.calendars.length, 'calendars');",
                  "        console.log('🎯 Using calendar:', primaryCalendar ? primaryCalendar.name : firstCalendar.name);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/calendars",
              "host": ["{{BASE_URL}}"],
              "path": ["calendars"]
            },
            "description": "📋 Lista todos los calendarios disponibles del usuario"
          }
        },
        {
          "name": "List Writable Calendars",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/calendars?onlyWritable=true&onlyActive=true",
              "host": ["{{BASE_URL}}"],
              "path": ["calendars"],
              "query": [
                {
                  "key": "onlyWritable",
                  "value": "true",
                  "description": "Solo calendarios con permisos de escritura"
                },
                {
                  "key": "onlyActive",
                  "value": "true",
                  "description": "Solo calendarios activos"
                }
              ]
            },
            "description": "📝 Lista calendarios donde se pueden crear eventos"
          }
        },
        {
          "name": "Get Calendar Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/calendars/{{CALENDAR_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["calendars", "{{CALENDAR_ID}}"]
            },
            "description": "🔍 Obtiene detalles específicos de un calendario"
          }
        },
        {
          "name": "Set Default Calendar",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"calendarId\": \"{{CALENDAR_ID}}\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/calendars/default",
              "host": ["{{BASE_URL}}"],
              "path": ["calendars", "default"]
            },
            "description": "🎯 Establece calendario por defecto para nuevos eventos"
          }
        }
      ],
      "description": "📅 Gestión avanzada de calendarios específicos"
    },
    {
      "name": "🎯 Events Management",
      "item": [
        {
          "name": "List User Events",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/events?page=1&limit=10&isActive=true",
              "host": ["{{BASE_URL}}"],
              "path": ["events"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "isActive",
                  "value": "true",
                  "description": "Solo eventos activos"
                }
              ]
            },
            "description": "📋 Lista eventos del usuario con paginación"
          }
        },
        {
          "name": "Create Event - Default Calendar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('EVENT_ID', response.data.id);",
                  "    pm.collectionVariables.set('EVENT_SLUG', response.data.slug);",
                  "    console.log('✅ Event created:', response.data.title);",
                  "    console.log('🔗 Public URL:', response.data.publicUrl);",
                  "    console.log('📅 Calendar:', response.data.calendarId || 'primary');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Consulta de 30 minutos\",\n  \"description\": \"Reunión para discutir proyectos y necesidades\",\n  \"duration\": 30,\n  \"privacy\": \"public\",\n  \"locationType\": \"google_meet\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/events",
              "host": ["{{BASE_URL}}"],
              "path": ["events"]
            },
            "description": "📅 Crea evento en calendario por defecto"
          }
        },
        {
          "name": "Create Event - Specific Calendar",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('✅ Event created in specific calendar:', response.data.calendarId);",
                  "    console.log('📝 Title:', response.data.title);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Consulta Especializada - 60 min\",\n  \"description\": \"Consulta especializada con análisis detallado\",\n  \"duration\": 60,\n  \"privacy\": \"public\",\n  \"locationType\": \"google_meet\",\n  \"calendarId\": \"{{CALENDAR_ID}}\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/events",
              "host": ["{{BASE_URL}}"],
              "path": ["events"]
            },
            "description": "🎯 Crea evento en calendario específico"
          }
        },
        {
          "name": "Get Event by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/events/{{EVENT_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["events", "{{EVENT_ID}}"]
            },
            "description": "🔍 Obtiene detalles de evento específico"
          }
        },
        {
          "name": "Get Public Event by Slug",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/public/events/{{USERNAME}}/{{EVENT_SLUG}}",
              "host": ["{{BASE_URL}}"],
              "path": ["public", "events", "{{USERNAME}}", "{{EVENT_SLUG}}"]
            },
            "description": "🌐 Obtiene evento público por username y slug (sin auth)"
          }
        },
        {
          "name": "Update Event",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Consulta Actualizada - 45 min\",\n  \"description\": \"Descripción actualizada del evento\",\n  \"duration\": 45,\n  \"privacy\": \"private\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/events/{{EVENT_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["events", "{{EVENT_ID}}"]
            },
            "description": "📝 Actualiza evento existente"
          }
        },
        {
          "name": "Delete Event",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/events/{{EVENT_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["events", "{{EVENT_ID}}"]
            },
            "description": "🗑️ Elimina evento (cancela reuniones programadas)"
          }
        }
      ],
      "description": "🎯 Gestión completa de tipos de eventos"
    },
    {
      "name": "⏰ Schedules & Availability",
      "item": [
        {
          "name": "Get User Schedules",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/schedules",
              "host": ["{{BASE_URL}}"],
              "path": ["schedules"]
            },
            "description": "📅 Obtiene configuración de horarios del usuario"
          }
        },
        {
          "name": "Update Schedules",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schedules\": [\n    {\n      \"dayOfWeek\": 1,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 2,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 3,\n      \"startTime\": \"10:00\",\n      \"endTime\": \"16:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 10\n    },\n    {\n      \"dayOfWeek\": 4,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 5,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"15:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 6,\n      \"startTime\": \"00:00\",\n      \"endTime\": \"00:00\",\n      \"isAvailable\": false,\n      \"bufferTime\": 0\n    },\n    {\n      \"dayOfWeek\": 0,\n      \"startTime\": \"00:00\",\n      \"endTime\": \"00:00\",\n      \"isAvailable\": false,\n      \"bufferTime\": 0\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/schedules",
              "host": ["{{BASE_URL}}"],
              "path": ["schedules"]
            },
            "description": "🔄 Configura horarios de disponibilidad semanal"
          }
        },
        {
          "name": "Get Available Slots",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/public/availability/{{USERNAME}}/{{EVENT_SLUG}}?date=2025-06-17&timezone={{TIMEZONE}}",
              "host": ["{{BASE_URL}}"],
              "path": ["public", "availability", "{{USERNAME}}", "{{EVENT_SLUG}}"],
              "query": [
                {
                  "key": "date",
                  "value": "2025-06-17",
                  "description": "Fecha en formato YYYY-MM-DD"
                },
                {
                  "key": "timezone",
                  "value": "{{TIMEZONE}}",
                  "description": "Zona horaria IANA"
                }
              ]
            },
            "description": "🕐 Obtiene slots disponibles para fecha específica"
          }
        }
      ],
      "description": "⏰ Gestión de horarios y disponibilidad"
    },
    {
      "name": "🤝 Meetings Management",
      "item": [
        {
          "name": "List User Meetings",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/meetings?status=scheduled&page=1&limit=10",
              "host": ["{{BASE_URL}}"],
              "path": ["meetings"],
              "query": [
                {
                  "key": "status",
                  "value": "scheduled",
                  "description": "scheduled | cancelled | completed"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "📋 Lista reuniones del usuario con filtros"
          }
        },
        {
          "name": "Schedule Meeting (Public)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('MEETING_ID', response.data.id);",
                  "    console.log('✅ Meeting scheduled successfully');",
                  "    console.log('🔗 Meeting URL:', response.data.meetingUrl);",
                  "    console.log('📅 Calendar used:', response.data.calendarId);",
                  "    console.log('👤 Attendee:', response.data.attendee.name);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"startTime\": \"2025-06-17T15:00:00.000Z\",\n  \"endTime\": \"2025-06-17T15:30:00.000Z\",\n  \"attendee\": {\n    \"name\": \"María García\",\n    \"email\": \"maria.garcia@ejemplo.com\",\n    \"timezone\": \"{{TIMEZONE}}\"\n  },\n  \"notes\": \"Reunión para discutir estrategia de marketing digital. Necesito asesoría sobre redes sociales y presencia online.\"\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/public/meetings/{{USERNAME}}/{{EVENT_SLUG}}",
              "host": ["{{BASE_URL}}"],
              "path": ["public", "meetings", "{{USERNAME}}", "{{EVENT_SLUG}}"]
            },
            "description": "🤝 Programa reunión (endpoint público, sin auth)"
          }
        },
        {
          "name": "Cancel Meeting",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/meetings/{{MEETING_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["meetings", "{{MEETING_ID}}"]
            },
            "description": "❌ Cancela reunión (elimina del calendario correcto)"
          }
        },
        {
          "name": "Get Meeting Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/meetings/{{MEETING_ID}}",
              "host": ["{{BASE_URL}}"],
              "path": ["meetings", "{{MEETING_ID}}"]
            },
            "description": "🔍 Obtiene detalles específicos de una reunión"
          }
        }
      ],
      "description": "🤝 Gestión completa de reuniones programadas"
    },
    {
      "name": "🔗 OAuth & Integrations",
      "item": [
        {
          "name": "Get Google Auth URL",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('🔗 Google Auth URL:', response.data.authUrl);",
                  "    console.log('⚠️ Visit this URL in browser to authorize');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/auth/google",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "google"]
            },
            "description": "🔗 Obtiene URL de autorización de Google OAuth"
          }
        },
        {
          "name": "Check Integration Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/auth/integrations",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "integrations"]
            },
            "description": "✅ Verifica estado de todas las integraciones"
          }
        },
        {
          "name": "Disconnect Google Integration",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{JWT_TOKEN}}"
              }
            ],
            "url": {
              "raw": "{{BASE_URL}}/auth/integrations/google",
              "host": ["{{BASE_URL}}"],
              "path": ["auth", "integrations", "google"]
            },
            "description": "🔌 Desconecta integración con Google"
          }
        }
      ],
      "description": "🔗 Gestión de integraciones OAuth2"
    },
    {
      "name": "🔍 Utility Endpoints",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status', 'ok');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/health",
              "host": ["{{BASE_URL}}"],
              "path": ["health"]
            },
            "description": "💓 Verifica estado del servidor"
          }
        },
        {
          "name": "API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/info",
              "host": ["{{BASE_URL}}"],
              "path": ["info"]
            },
            "description": "ℹ️ Información general de la API"
          }
        }
      ],
      "description": "🔍 Endpoints de utilidad y diagnóstico"
    },
    {
      "name": "🧪 Complete Workflow Tests",
      "item": [
        {
          "name": "🎯 WORKFLOW 1: Full User Setup",
          "item": [
            {
              "name": "1. Register New User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('User registration successful', function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('USER_ID', response.data.id);",
                      "    pm.collectionVariables.set('USERNAME', response.data.username);",
                      "    console.log('✅ Step 1: User registered -', response.data.email);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test.workflow@ejemplo.com\",\n  \"password\": \"WorkflowTest123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"Workflow\",\n  \"timezone\": \"America/Mexico_City\"\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/auth/register",
                  "host": ["{{BASE_URL}}"],
                  "path": ["auth", "register"]
                }
              }
            },
            {
              "name": "2. Login User",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('JWT_TOKEN', response.data.token);",
                      "    console.log('✅ Step 2: Login successful');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"test.workflow@ejemplo.com\",\n  \"password\": \"WorkflowTest123!\"\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/auth/login",
                  "host": ["{{BASE_URL}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "3. Get Available Calendars",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    if (response.data && response.data.calendars && response.data.calendars.length > 0) {",
                      "        pm.collectionVariables.set('CALENDAR_ID', response.data.calendars[0].id);",
                      "        console.log('✅ Step 3: Found calendars, using:', response.data.calendars[0].name);",
                      "    } else {",
                      "        console.log('⚠️ Step 3: No calendars found, Google not connected');",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "url": {
                  "raw": "{{BASE_URL}}/calendars",
                  "host": ["{{BASE_URL}}"],
                  "path": ["calendars"]
                }
              }
            },
            {
              "name": "4. Update User Schedule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    console.log('✅ Step 4: Schedule configured');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"schedules\": [\n    {\n      \"dayOfWeek\": 1,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 2,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 3,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 4,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"17:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    },\n    {\n      \"dayOfWeek\": 5,\n      \"startTime\": \"09:00\",\n      \"endTime\": \"15:00\",\n      \"isAvailable\": true,\n      \"bufferTime\": 15\n    }\n  ]\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/schedules",
                  "host": ["{{BASE_URL}}"],
                  "path": ["schedules"]
                }
              }
            },
            {
              "name": "5. Create First Event",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('EVENT_ID', response.data.id);",
                      "    pm.collectionVariables.set('EVENT_SLUG', response.data.slug);",
                      "    console.log('✅ Step 5: Event created -', response.data.title);",
                      "    console.log('🔗 Public URL:', response.data.publicUrl);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Consulta Inicial - 30 min\",\n  \"description\": \"Consulta inicial para conocer tus necesidades\",\n  \"duration\": 30,\n  \"privacy\": \"public\",\n  \"locationType\": \"google_meet\",\n  \"calendarId\": \"{{CALENDAR_ID}}\"\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/events",
                  "host": ["{{BASE_URL}}"],
                  "path": ["events"]
                }
              }
            }
          ],
          "description": "🎯 Flujo completo: Registro → Login → Configuración → Primer evento"
        },
        {
          "name": "📅 WORKFLOW 2: Meeting Scheduling",
          "item": [
            {
              "name": "1. Check Event Availability",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Available slots found:', response.data.slots.length);",
                      "    if (response.data.slots.length > 0) {",
                      "        const firstSlot = response.data.slots[0];",
                      "        pm.globals.set('AVAILABLE_START', firstSlot.startTime);",
                      "        pm.globals.set('AVAILABLE_END', firstSlot.endTime);",
                      "        console.log('🕐 First slot:', firstSlot.startTime, '-', firstSlot.endTime);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{BASE_URL}}/public/availability/{{USERNAME}}/{{EVENT_SLUG}}?date=2025-06-17&timezone={{TIMEZONE}}",
                  "host": ["{{BASE_URL}}"],
                  "path": ["public", "availability", "{{USERNAME}}", "{{EVENT_SLUG}}"],
                  "query": [
                    {
                      "key": "date",
                      "value": "2025-06-17"
                    },
                    {
                      "key": "timezone",
                      "value": "{{TIMEZONE}}"
                    }
                  ]
                }
              }
            },
            {
              "name": "2. Schedule Meeting",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 201) {",
                      "    const response = pm.response.json();",
                      "    pm.collectionVariables.set('MEETING_ID', response.data.id);",
                      "    console.log('✅ Meeting scheduled successfully');",
                      "    console.log('👤 Attendee:', response.data.attendee.name);",
                      "    console.log('🔗 Meeting URL:', response.data.meetingUrl || 'Not available');",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"startTime\": \"2025-06-17T15:00:00.000Z\",\n  \"endTime\": \"2025-06-17T15:30:00.000Z\",\n  \"attendee\": {\n    \"name\": \"Cliente Test\",\n    \"email\": \"cliente.test@ejemplo.com\",\n    \"timezone\": \"America/Mexico_City\"\n  },\n  \"notes\": \"Testing del flujo completo de programación de reunión\"\n}"
                },
                "url": {
                  "raw": "{{BASE_URL}}/public/meetings/{{USERNAME}}/{{EVENT_SLUG}}",
                  "host": ["{{BASE_URL}}"],
                  "path": ["public", "meetings", "{{USERNAME}}", "{{EVENT_SLUG}}"]
                }
              }
            },
            {
              "name": "3. Verify Meeting in User List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    const meetings = response.data.meetings || [];",
                      "    console.log('✅ User has', meetings.length, 'scheduled meetings');",
                      "    const lastMeeting = meetings[meetings.length - 1];",
                      "    if (lastMeeting) {",
                      "        console.log('📅 Last meeting:', lastMeeting.attendee.name, 'at', lastMeeting.startTime);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "url": {
                  "raw": "{{BASE_URL}}/meetings?status=scheduled",
                  "host": ["{{BASE_URL}}"],
                  "path": ["meetings"],
                  "query": [
                    {
                      "key": "status",
                      "value": "scheduled"
                    }
                  ]
                }
              }
            }
          ],
          "description": "📅 Flujo completo: Verificar disponibilidad → Programar → Verificar"
        },
        {
          "name": "🔗 WORKFLOW 3: Integration Testing",
          "item": [
            {
              "name": "1. Check Integration Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('✅ Google connected:', response.data.google.connected);",
                      "    console.log('📧 Google email:', response.data.google.email || 'Not available');",
                      "    if (response.data.google.connected) {",
                      "        console.log('🔗 Connected at:', response.data.google.connectedAt);",
                      "    }",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "url": {
                  "raw": "{{BASE_URL}}/auth/integrations",
                  "host": ["{{BASE_URL}}"],
                  "path": ["auth", "integrations"]
                }
              }
            },
            {
              "name": "2. Get Google Auth URL (if needed)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "if (pm.response.code === 200) {",
                      "    const response = pm.response.json();",
                      "    console.log('🔗 Auth URL generated');",
                      "    console.log('⚠️ Visit this URL to authorize:');",
                      "    console.log(response.data.authUrl);",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{JWT_TOKEN}}"
                  }
                ],
                "url": {
                  "raw": "{{BASE_URL}}/auth/google",
                  "host": ["{{BASE_URL}}"],
                  "path": ["auth", "google"]
                }
              }
            }
          ],
          "description": "🔗 Testing de integraciones OAuth"
        }
      ],
      "description": "🧪 Flujos completos de testing para validar funcionalidad end-to-end"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{JWT_TOKEN}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 🚀 Pre-request Script Global para Cal Backend v3",
          "console.log('🚀 Cal Backend v3 - Making request to:', pm.request.url.toString());",
          "",
          "// Verificar autenticación para rutas protegidas",
          "const protectedPaths = [",
          "    '/events', '/schedules', '/meetings', '/calendars',",
          "    '/auth/profile', '/auth/integrations'",
          "];",
          "",
          "const currentPath = pm.request.url.getPath();",
          "const needsAuth = protectedPaths.some(path => currentPath.includes(path));",
          "const isPublicEndpoint = currentPath.includes('/public/');",
          "",
          "if (needsAuth && !isPublicEndpoint && !pm.collectionVariables.get('JWT_TOKEN')) {",
          "    console.warn('⚠️  Authentication required! Please login first.');",
          "    console.warn('🔑 Run \"Login User\" request to get JWT token');",
          "}",
          "",
          "// Log información contextual",
          "const method = pm.request.method;",
          "const hasBody = pm.request.body && pm.request.body.mode === 'raw';",
          "",
          "if (hasBody) {",
          "    try {",
          "        const body = JSON.parse(pm.request.body.raw);",
          "        if (body.calendarId) {",
          "            console.log('📅 Using calendar:', body.calendarId);",
          "        }",
          "        if (body.timezone) {",
          "            console.log('🌍 Timezone:', body.timezone);",
          "        }",
          "    } catch (e) {",
          "        // Body no es JSON válido",
          "    }",
          "}",
          "",
          "// Log variables importantes",
          "const username = pm.collectionVariables.get('USERNAME');",
          "const eventSlug = pm.collectionVariables.get('EVENT_SLUG');",
          "if (username && currentPath.includes(username)) {",
          "    console.log('👤 Using username:', username);",
          "}",
          "if (eventSlug && currentPath.includes(eventSlug)) {",
          "    console.log('🎯 Using event:', eventSlug);",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// 📊 Post-request Script Global para Cal Backend v3",
          "const statusCode = pm.response.code;",
          "const responseTime = pm.response.responseTime;",
          "",
          "// Tests básicos de respuesta",
          "pm.test('Response time is acceptable (< 5000ms)', function () {",
          "    pm.expect(responseTime).to.be.below(5000);",
          "});",
          "",
          "// Verificar formato JSON para respuestas de API",
          "const contentType = pm.response.headers.get('Content-Type');",
          "if (contentType && contentType.includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        try {",
          "            pm.response.json();",
          "        } catch (e) {",
          "            pm.expect.fail('Response is not valid JSON');",
          "        }",
          "    });",
          "",
          "    // Verificar estructura de respuesta para endpoints de API",
          "    pm.test('Response has expected structure', function () {",
          "        const jsonData = pm.response.json();",
          "        if (statusCode >= 200 && statusCode < 300) {",
          "            pm.expect(jsonData).to.have.property('success');",
          "            if (jsonData.success !== undefined) {",
          "                pm.expect(jsonData.success).to.be.true;",
          "            }",
          "        }",
          "    });",
          "}",
          "",
          "// Log resultados detallados",
          "if (statusCode >= 200 && statusCode < 300) {",
          "    console.log('✅ Success:', statusCode, '- Response time:', responseTime + 'ms');",
          "    ",
          "    // Log información específica de la respuesta",
          "    try {",
          "        const response = pm.response.json();",
          "        ",
          "        // Log información de calendarios",
          "        if (response.data && Array.isArray(response.data.calendars)) {",
          "            console.log('📅 Found', response.data.calendars.length, 'calendars');",
          "        } else if (response.data && Array.isArray(response.data.events)) {",
          "            console.log('🎯 Found', response.data.events.length, 'events');",
          "        } else if (response.data && Array.isArray(response.data.meetings)) {",
          "            console.log('🤝 Found', response.data.meetings.length, 'meetings');",
          "        }",
          "        ",
          "        // Log información específica de entidades",
          "        if (response.data && response.data.id) {",
          "            if (response.data.title) {",
          "                console.log('🎯 Event:', response.data.title, '(ID:', response.data.id + ')');",
          "            } else if (response.data.attendee) {",
          "                console.log('🤝 Meeting with:', response.data.attendee.name, '(ID:', response.data.id + ')');",
          "            }",
          "        }",
          "        ",
          "        // Log URLs importantes",
          "        if (response.data && response.data.publicUrl) {",
          "            console.log('🔗 Public URL:', response.data.publicUrl);",
          "        }",
          "        if (response.data && response.data.meetingUrl) {",
          "            console.log('📹 Meeting URL:', response.data.meetingUrl);",
          "        }",
          "        ",
          "    } catch (e) {",
          "        // Response no es JSON o no tiene estructura esperada",
          "    }",
          "    ",
          "} else if (statusCode >= 400 && statusCode < 500) {",
          "    console.log('❌ Client Error:', statusCode);",
          "    try {",
          "        const errorResponse = pm.response.json();",
          "        if (errorResponse.error && errorResponse.error.message) {",
          "            console.log('💬 Error:', errorResponse.error.message);",
          "        }",
          "        if (errorResponse.error && errorResponse.error.details) {",
          "            console.log('📝 Details:', JSON.stringify(errorResponse.error.details, null, 2));",
          "        }",
          "    } catch (e) {",
          "        console.log('📝 Raw response:', pm.response.text());",
          "    }",
          "    ",
          "} else if (statusCode >= 500) {",
          "    console.log('🔥 Server Error:', statusCode);",
          "    console.log('📝 Response:', pm.response.text());",
          "}",
          "",
          "// Tests específicos para códigos de estado",
          "if (statusCode === 401) {",
          "    pm.test('Authentication error handled', function () {",
          "        pm.expect(statusCode).to.equal(401);",
          "        console.log('🔐 Tip: Make sure you are logged in and have a valid token');",
          "    });",
          "} else if (statusCode === 404) {",
          "    pm.test('Resource not found', function () {",
          "        pm.expect(statusCode).to.equal(404);",
          "        console.log('🔍 Tip: Check if the resource ID/slug is correct');",
          "    });",
          "}"
        ]
      }
    }
  ]
}